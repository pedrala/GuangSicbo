{"remainingRequest":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/thread-loader/dist/cjs.js!/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/babel-loader/lib/index.js!/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/eslint-loader/index.js??ref--13-0!/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/src/js/chain.js","dependencies":[{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/src/js/chain.js","mtime":1567760082000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["'use strict';\n\nimport \"core-js/modules/es6.array.find\";\nimport _classCallCheck from \"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es6.function.name\";\nimport { Observable, from } from 'rxjs';\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\nimport { JsonRpc, Api } from 'eosjs';\nimport { EOS_NETWORK } from \"./endpoint.js\";\nvar APP_NAME = 'GuangGame';\nScatterJS.plugins(new ScatterEOS());\nvar network = ScatterJS.Network.fromJson(EOS_NETWORK);\n\nvar buildBetData = function buildBetData(account, amount, bets) {\n  return {\n    actions: [{\n      account: 'taztokenbase',\n      name: 'transfer',\n      authorization: [{\n        actor: account.name,\n        permission: account.authority\n      }],\n      data: {\n        from: account.name,\n        to: 'tazgsicbobet',\n        quantity: \"\".concat(amount, \" TAZCHIP\"),\n        memo: bets\n      }\n    }]\n  };\n};\n/**\r\n * 블록체인과 통신하기 위한 클래스\r\n */\n\n\nvar Blockchain =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * constractor\r\n   */\n  function Blockchain() {\n    _classCallCheck(this, Blockchain);\n\n    this.rpc = new JsonRpc(network.fullhost());\n  }\n  /**\r\n   * connect to scatter\r\n   */\n\n\n  _createClass(Blockchain, [{\n    key: \"connect\",\n    value: function connect() {\n      return from(ScatterJS.connect(APP_NAME, {\n        network: network\n      }));\n    }\n    /**\r\n     * Login\r\n     */\n\n  }, {\n    key: \"login\",\n    value: function login() {\n      return new Observable(function (observer) {\n        ScatterJS.login().then(function (id) {\n          if (!id || !id.accounts || !id.accounts.length) {\n            return observer.error(new Error('No identity'));\n          }\n\n          var account = id.accounts.find(function (element) {\n            return element.blockchain === 'eos';\n          });\n\n          if (!account) {\n            return observer.error(new Error('No eos account'));\n          }\n\n          observer.next(account);\n          observer.complete();\n        }).catch(function (error) {\n          return observer.error(error);\n        });\n      });\n    }\n    /**\r\n     * Get user balance\r\n     * \r\n     * @param { string } contract \r\n     * @param { string } account \r\n     * @param { string } token \r\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(contract, account, token) {\n      var _this = this;\n\n      return new Observable(function (observer) {\n        _this.rpc.get_currency_balance(contract, account, token).then(function (bal) {\n          observer.next(bal);\n          observer.complete();\n        }).catch(function (err) {\n          observer.error(err);\n        });\n      });\n    }\n    /**\r\n     * Get user balance\r\n     * \r\n     * @param { string } contract \r\n     * @param { string } account \r\n     * @param { string } token \r\n     */\n\n  }, {\n    key: \"getEosBalance\",\n    value: function getEosBalance(account) {\n      var _this2 = this;\n\n      return new Observable(function (observer) {\n        _this2.rpc.get_currency_balance('eosio.token', account, 'EOS').then(function (bal) {\n          observer.next(bal);\n          observer.complete();\n        }).catch(function (err) {\n          observer.error(err);\n        });\n      });\n    }\n    /**\r\n     * Scatter에 배팅 트랜젝션 생성을 요청한다.\r\n     * \r\n     * @param {*} account \r\n     * @param {*} amount \r\n     * @param {*} memo \r\n     */\n\n  }, {\n    key: \"confirmBetTransaction\",\n    value: function confirmBetTransaction(account, amount, memo) {\n      var eos = ScatterJS.eos(network, Api, {\n        rpc: this.rpc,\n        beta3: true\n      });\n      return new Observable(function (observer) {\n        eos.transact(buildBetData(account, amount.toFixed(4), memo), {\n          broadcast: false,\n          blocksBehind: 4,\n          expireSeconds: 30\n        }).then(function (res) {\n          observer.next(res);\n          observer.complete();\n        }).catch(function (error) {\n          return observer.error(error);\n        });\n      });\n    }\n    /**\r\n     * 생성된 트랜젝션을 블록체인에 기록한다.\r\n     * @param {*} trx \r\n     */\n\n  }, {\n    key: \"sendBetTransaction\",\n    value: function sendBetTransaction(trx) {\n      var eos = ScatterJS.eos(network, Api, {\n        rpc: this.rpc,\n        beta3: true\n      });\n      return new Observable(function (observer) {\n        eos.pushSignedTransaction(trx).then(function (res) {\n          observer.next(res);\n          observer.complete();\n        }).catch(function (error) {\n          return observer.error(error);\n        });\n      });\n    }\n    /**\r\n     * 토큰을 전송한다.\r\n     * \r\n     * @param {*} from \r\n     * @param {*} to \r\n     * @param {*} tokenContract \r\n     * @param {*} quantity \r\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function transfer(from, to, tokenContract, quantity) {\n      var eos = ScatterJS.eos(network, Api, {\n        rpc: this.rpc,\n        beta3: true\n      });\n      return new Observable(function (observer) {\n        eos.transact({\n          actions: [{\n            account: tokenContract,\n            name: 'transfer',\n            authorization: [{\n              actor: from,\n              permission: 'active'\n            }],\n            data: {\n              from: from,\n              to: to,\n              quantity: quantity,\n              memo: ''\n            }\n          }]\n        }, {\n          blocksBehind: 4,\n          expireSeconds: 30\n        }).then(function (result) {\n          observer.next(result);\n          observer.complete();\n        }).catch(function (error) {\n          return observer.error(error);\n        });\n      });\n    }\n    /**\r\n     * TAZ를 stake 한다.\r\n     * \r\n     * @param {*} user \r\n     * @param {*} quantity \r\n     */\n\n  }, {\n    key: \"stake\",\n    value: function stake(user, quantity) {\n      var eos = ScatterJS.eos(network, Api, {\n        rpc: this.rpc,\n        beta3: true\n      });\n      return new Observable(function (observer) {\n        eos.transact({\n          actions: [{\n            account: 'taztokenstak',\n            name: 'stake',\n            authorization: [{\n              actor: user,\n              permission: 'active'\n            }],\n            data: {\n              user: user,\n              quantity: quantity\n            }\n          }]\n        }, {\n          blocksBehind: 4,\n          expireSeconds: 30\n        }).then(function (result) {\n          observer.next(result);\n          observer.complete();\n        }).catch(function (error) {\n          return observer.error(error);\n        });\n      });\n    }\n    /**\r\n     * unstake된 전량을 stake 한다.\r\n     * @param {*} user \r\n     */\n\n  }, {\n    key: \"restake\",\n    value: function restake(user) {\n      var eos = ScatterJS.eos(network, Api, {\n        rpc: this.rpc,\n        beta3: true\n      });\n      return new Observable(function (observer) {\n        eos.transact({\n          actions: [{\n            account: 'taztokenstak',\n            name: 'stake',\n            authorization: [{\n              actor: user,\n              permission: 'active'\n            }],\n            data: {\n              user: user,\n              quantity: '0.0000 TAZ'\n            }\n          }]\n        }, {\n          blocksBehind: 4,\n          expireSeconds: 30\n        }).then(function (result) {\n          observer.next(result);\n          observer.complete();\n        }).catch(function (error) {\n          return observer.error(error);\n        });\n      });\n    }\n    /**\r\n     * 지정된 양만큰 unstake한다.\r\n     * \r\n     * @param {*} user \r\n     * @param {*} quantity \r\n     */\n\n  }, {\n    key: \"unstake\",\n    value: function unstake(user, quantity) {\n      var eos = ScatterJS.eos(network, Api, {\n        rpc: this.rpc,\n        beta3: true\n      });\n      return new Observable(function (observer) {\n        eos.transact({\n          actions: [{\n            account: 'taztokenstak',\n            name: 'unstake',\n            authorization: [{\n              actor: user,\n              permission: 'active'\n            }],\n            data: {\n              user: user,\n              quantity: quantity\n            }\n          }]\n        }, {\n          blocksBehind: 4,\n          expireSeconds: 30\n        }).then(function (result) {\n          observer.next(result);\n          observer.complete();\n        }).catch(function (error) {\n          return observer.error(error);\n        });\n      });\n    }\n  }]);\n\n  return Blockchain;\n}();\n\nexport { Blockchain as default };",{"version":3,"sources":["/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/src/js/chain.js"],"names":["Observable","from","ScatterJS","ScatterEOS","JsonRpc","Api","EOS_NETWORK","APP_NAME","plugins","network","Network","fromJson","buildBetData","account","amount","bets","actions","name","authorization","actor","permission","authority","data","to","quantity","memo","Blockchain","rpc","fullhost","connect","observer","login","then","id","accounts","length","error","Error","find","element","blockchain","next","complete","catch","contract","token","get_currency_balance","bal","err","eos","beta3","transact","toFixed","broadcast","blocksBehind","expireSeconds","res","trx","pushSignedTransaction","tokenContract","result","user"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nimport {\r\n  Observable,\r\n  from,\r\n} from 'rxjs';\r\n\r\nimport ScatterJS from 'scatterjs-core';\r\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\r\nimport {\r\n  JsonRpc,\r\n  Api\r\n} from 'eosjs';\r\n\r\nimport { EOS_NETWORK } from './endpoint.js';\r\n\r\nconst APP_NAME = 'GuangGame';\r\n\r\nScatterJS.plugins(new ScatterEOS());\r\n\r\nconst network = ScatterJS.Network.fromJson(EOS_NETWORK);\r\n\r\nconst buildBetData = (account, amount, bets) => {\r\n  return {\r\n    actions: [{\r\n      account: 'taztokenbase',\r\n      name: 'transfer',\r\n      authorization: [{\r\n        actor: account.name,\r\n        permission: account.authority,\r\n      }],\r\n      data: {\r\n        from: account.name,\r\n        to: 'tazgsicbobet',\r\n        quantity: `${amount} TAZCHIP`,\r\n        memo: bets,\r\n      },\r\n    }]\r\n  }\r\n}\r\n\r\n/**\r\n * 블록체인과 통신하기 위한 클래스\r\n */\r\nexport default class Blockchain {\r\n  /**\r\n   * constractor\r\n   */\r\n  constructor() {\r\n    this.rpc = new JsonRpc(network.fullhost());\r\n  }\r\n\r\n  /**\r\n   * connect to scatter\r\n   */\r\n  connect() {\r\n    return from(ScatterJS.connect(APP_NAME, {\r\n      network\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Login\r\n   */\r\n  login() {\r\n    return new Observable(observer => {\r\n      ScatterJS.login().then(id => {\r\n        if (!id || !id.accounts || !id.accounts.length) {\r\n          return observer.error(new Error('No identity'));\r\n        }\r\n\r\n        const account = id.accounts.find(element => element.blockchain === 'eos')\r\n        if (!account) {\r\n          return observer.error(new Error('No eos account'));\r\n        }\r\n\r\n        observer.next(account);\r\n        observer.complete();\r\n      }).catch(error => observer.error(error));\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get user balance\r\n   * \r\n   * @param { string } contract \r\n   * @param { string } account \r\n   * @param { string } token \r\n   */\r\n  getBalance(contract, account, token) {\r\n    return new Observable(observer => {\r\n      this.rpc.get_currency_balance(contract, account, token)\r\n        .then(bal => {\r\n          observer.next(bal);\r\n          observer.complete();\r\n        })\r\n        .catch(err => {\r\n          observer.error(err);\r\n        })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get user balance\r\n   * \r\n   * @param { string } contract \r\n   * @param { string } account \r\n   * @param { string } token \r\n   */\r\n  getEosBalance(account) {\r\n    return new Observable(observer => {\r\n      this.rpc.get_currency_balance('eosio.token', account, 'EOS')\r\n        .then(bal => {\r\n          observer.next(bal);\r\n          observer.complete();\r\n        })\r\n        .catch(err => {\r\n          observer.error(err);\r\n        })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Scatter에 배팅 트랜젝션 생성을 요청한다.\r\n   * \r\n   * @param {*} account \r\n   * @param {*} amount \r\n   * @param {*} memo \r\n   */\r\n  confirmBetTransaction(account, amount, memo) {\r\n    const eos = ScatterJS.eos(network, Api, {\r\n      rpc: this.rpc,\r\n      beta3: true\r\n    });\r\n    return new Observable(observer => {\r\n      eos.transact(buildBetData(account, amount.toFixed(4), memo), {\r\n        broadcast: false,\r\n        blocksBehind: 4,\r\n        expireSeconds: 30,\r\n      }).then(res => {\r\n        observer.next(res);\r\n        observer.complete();\r\n      }).catch(error => observer.error(error));\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 생성된 트랜젝션을 블록체인에 기록한다.\r\n   * @param {*} trx \r\n   */\r\n  sendBetTransaction(trx) {\r\n    const eos = ScatterJS.eos(network, Api, {\r\n      rpc: this.rpc,\r\n      beta3: true\r\n    });\r\n    \r\n    return new Observable(observer => {\r\n      eos.pushSignedTransaction(trx).then(res => {\r\n        observer.next(res);\r\n        observer.complete();\r\n      }).catch(error => observer.error(error));\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 토큰을 전송한다.\r\n   * \r\n   * @param {*} from \r\n   * @param {*} to \r\n   * @param {*} tokenContract \r\n   * @param {*} quantity \r\n   */\r\n  transfer(from, to, tokenContract, quantity) {\r\n    const eos = ScatterJS.eos(network, Api, {\r\n      rpc: this.rpc,\r\n      beta3: true\r\n    });\r\n\r\n    return new Observable(observer => {\r\n      eos.transact({\r\n        actions: [{\r\n          account: tokenContract,\r\n          name: 'transfer',\r\n          authorization: [{\r\n            actor: from,\r\n            permission: 'active',\r\n          }],\r\n          data: {\r\n            from: from,\r\n            to: to,\r\n            quantity: quantity,\r\n            memo: '',\r\n          },\r\n        }]\r\n      },\r\n      {\r\n        blocksBehind: 4,\r\n        expireSeconds: 30,\r\n      })\r\n      .then(result => {\r\n        observer.next(result);\r\n        observer.complete();\r\n      })\r\n      .catch(error => observer.error(error))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * TAZ를 stake 한다.\r\n   * \r\n   * @param {*} user \r\n   * @param {*} quantity \r\n   */\r\n  stake(user, quantity) {\r\n    const eos = ScatterJS.eos(network, Api, {\r\n      rpc: this.rpc,\r\n      beta3: true\r\n    });\r\n\r\n    return new Observable(observer => {\r\n      eos.transact({\r\n          actions: [{\r\n            account: 'taztokenstak',\r\n            name: 'stake',\r\n            authorization: [{\r\n              actor: user,\r\n              permission: 'active',\r\n            }],\r\n            data: {\r\n              user: user,\r\n              quantity: quantity\r\n            },\r\n          }]\r\n        }, {\r\n          blocksBehind: 4,\r\n          expireSeconds: 30,\r\n        })\r\n        .then(result => {\r\n          observer.next(result);\r\n          observer.complete();\r\n        })\r\n        .catch(error => observer.error(error))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * unstake된 전량을 stake 한다.\r\n   * @param {*} user \r\n   */\r\n  restake(user) {\r\n    const eos = ScatterJS.eos(network, Api, {\r\n      rpc: this.rpc,\r\n      beta3: true\r\n    });\r\n\r\n    return new Observable(observer => {\r\n      eos.transact({\r\n          actions: [{\r\n            account: 'taztokenstak',\r\n            name: 'stake',\r\n            authorization: [{\r\n              actor: user,\r\n              permission: 'active',\r\n            }],\r\n            data: {\r\n              user: user,\r\n              quantity: '0.0000 TAZ'\r\n            },\r\n          }]\r\n        }, {\r\n          blocksBehind: 4,\r\n          expireSeconds: 30,\r\n        })\r\n        .then(result => {\r\n          observer.next(result);\r\n          observer.complete();\r\n        })\r\n        .catch(error => observer.error(error))\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 지정된 양만큰 unstake한다.\r\n   * \r\n   * @param {*} user \r\n   * @param {*} quantity \r\n   */\r\n  unstake(user, quantity) {\r\n    const eos = ScatterJS.eos(network, Api, {\r\n      rpc: this.rpc,\r\n      beta3: true\r\n    });\r\n\r\n    return new Observable(observer => {\r\n      eos.transact({\r\n          actions: [{\r\n            account: 'taztokenstak',\r\n            name: 'unstake',\r\n            authorization: [{\r\n              actor: user,\r\n              permission: 'active',\r\n            }],\r\n            data: {\r\n              user: user,\r\n              quantity: quantity\r\n            },\r\n          }]\r\n        }, {\r\n          blocksBehind: 4,\r\n          expireSeconds: 30,\r\n        })\r\n        .then(result => {\r\n          observer.next(result);\r\n          observer.complete();\r\n        })\r\n        .catch(error => observer.error(error))\r\n    })\r\n  }\r\n}\r\n"]}]}