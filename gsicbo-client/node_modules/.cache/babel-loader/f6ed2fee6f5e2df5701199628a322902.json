{"remainingRequest":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/thread-loader/dist/cjs.js!/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/babel-loader/lib/index.js!/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/eslint-loader/index.js??ref--13-0!/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/src/js/sicbo.js","dependencies":[{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/src/js/sicbo.js","mtime":1567760084000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["'use strict';\n/**\r\n * 식보 게임에 구현에 필요한 상수와 유틸성 함수를 정의한다.\r\n */\n\nvar DEFAULT_WIDTH = 1400; // PC 게임판 기본 폭\n\nvar DEFAULT_HEIGHT = 800; // PC 게임판 기본 높이\n\nvar ASPECT_RATIO = DEFAULT_WIDTH / DEFAULT_HEIGHT; // PC 게임판 종횡비\n\nvar CHIP_TBL_HEIGHT = 112; // PC 칩 UI 높이\n\nvar CHIP_TBL_MOBILE_HEIGHT = 90; // 모바일 칩 UI 높이\n\nvar SICBO_MOBILE_WIDTH = 1024; // 모바일로 전환되는 브라우져 폭\n\nvar SICBO_MOBILE_HEIGHT = 680; // 모바일로 전환되는 브라우져 높이\n\nvar BET_TIMER = 50; // 배팅 시간\n\nvar CAST_CHIP_SIZE = 80; // PC화면 칩 애니메이션 크기\n\nvar CAST_CHIP_MOBILE_SIZE = 40; // 모바일 화면 칩 애니메이션 크기\n\nvar CHIP_PRICE = [100, 1000, 5000, 10000, 50000, 100000, 500000, 1000000, 5000000]; // 칩 배팅 금액\n\nvar CARD_NUMS = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]; // 화투 번호 (화투 이미지 인덱스 순서)\n\nvar CARD_GUANG = [// 광: true (화투 이미지 인덱스 순서)\ntrue, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false];\nvar APPROVAL_WAITING_TIME = 60000; // 애니메이션 타이머\n\nvar DELAY_CAST_CARD1 = 1000; // 첫 번째 화투를 던지고 두 번째 화투를 던질때까지의 지연시간\n\nvar DELAY_CAST_CARD2 = 1000; // 두 번째 화투를 던지고 식보통을 덮을 때까지의 지연시간\n\nvar DELAY_CLOSE_TONG = 2000; // 식보통을 덮기 시작하면서 부터 Placing bet 애니메이션이 시작될 때까지 지연시간\n\nvar DELAY_STARTING_ANI = 4000; // placing bet 애니메이션이 종료될 때까지 지연시간\n\nvar DELAY_RESET_GAME = 2000; // 배팅시간이 종료된 뒤 강제 청산 되기까지 지연시간\n\n/**\r\n * \r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\n\nvar getPositions = function getPositions(card1, card2) {\n  var positions = [];\n  var isPair = false;\n  isPair = CARD_NUMS[card1] === CARD_NUMS[card2];\n\n  if (isPair) {\n    positions.push(15);\n    positions.push(4 + CARD_NUMS[card1]);\n  } else {\n    if ((CARD_NUMS[card1] + CARD_NUMS[card2]) % 10 < 5) {\n      positions.push(0);\n    } else {\n      positions.push(2);\n    }\n\n    if ((CARD_NUMS[card1] + CARD_NUMS[card2]) % 2 === 1) {\n      positions.push(3);\n    } else {\n      positions.push(4);\n    }\n\n    if (CARD_GUANG[card1] || CARD_GUANG[card2]) {\n      positions.push(1);\n    }\n  }\n\n  positions.push(15 + CARD_NUMS[card1]);\n\n  if (CARD_NUMS[card1] !== CARD_NUMS[card2]) {\n    positions.push(15 + CARD_NUMS[card2]);\n  }\n\n  return positions;\n};\n/**\r\n * 입력된 카드가 땡인지 검사\r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\n\n\nvar isPair = function isPair(card1, card2) {\n  return CARD_NUMS[card1] === CARD_NUMS[card2];\n};\n/**\r\n * 입력된 카드의 끝수가 5보다 작은지 검사\r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\n\n\nvar isSmall = function isSmall(card1, card2) {\n  return (CARD_NUMS[card1] + CARD_NUMS[card2]) % 10 < 5;\n};\n/**\r\n * 입력된 카드의 끝수가 홀 수 인지 검사\r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\n\n\nvar isOdd = function isOdd(card1, card2) {\n  return (CARD_NUMS[card1] + CARD_NUMS[card2]) % 2 === 1;\n};\n/**\r\n * 입력된 카드가 광인지 검사\r\n * @param {*} card \r\n */\n\n\nvar isGuang = function isGuang(card) {\n  return CARD_GUANG[card];\n};\n\nexport { DEFAULT_WIDTH, DEFAULT_HEIGHT, ASPECT_RATIO, CHIP_TBL_HEIGHT, CHIP_TBL_MOBILE_HEIGHT, SICBO_MOBILE_WIDTH, SICBO_MOBILE_HEIGHT, BET_TIMER, CAST_CHIP_SIZE, CAST_CHIP_MOBILE_SIZE, CHIP_PRICE, CARD_NUMS, CARD_GUANG, APPROVAL_WAITING_TIME, DELAY_CAST_CARD1, DELAY_CAST_CARD2, DELAY_CLOSE_TONG, DELAY_STARTING_ANI, DELAY_RESET_GAME, getPositions, isPair, isSmall, isOdd, isGuang };",{"version":3,"sources":["/Users/crazycapital/Downloads/GuangGame/gsicboDeliver201909302/sources_20190930/gsicbo-client/src/js/sicbo.js"],"names":["DEFAULT_WIDTH","DEFAULT_HEIGHT","ASPECT_RATIO","CHIP_TBL_HEIGHT","CHIP_TBL_MOBILE_HEIGHT","SICBO_MOBILE_WIDTH","SICBO_MOBILE_HEIGHT","BET_TIMER","CAST_CHIP_SIZE","CAST_CHIP_MOBILE_SIZE","CHIP_PRICE","CARD_NUMS","CARD_GUANG","APPROVAL_WAITING_TIME","DELAY_CAST_CARD1","DELAY_CAST_CARD2","DELAY_CLOSE_TONG","DELAY_STARTING_ANI","DELAY_RESET_GAME","getPositions","card1","card2","positions","isPair","push","isSmall","isOdd","isGuang","card"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\n/**\r\n * 식보 게임에 구현에 필요한 상수와 유틸성 함수를 정의한다.\r\n */\r\n\r\nconst DEFAULT_WIDTH = 1400;  // PC 게임판 기본 폭\r\nconst DEFAULT_HEIGHT = 800;  // PC 게임판 기본 높이\r\nconst ASPECT_RATIO = DEFAULT_WIDTH / DEFAULT_HEIGHT; // PC 게임판 종횡비\r\nconst CHIP_TBL_HEIGHT = 112;  // PC 칩 UI 높이\r\nconst CHIP_TBL_MOBILE_HEIGHT = 90;  // 모바일 칩 UI 높이\r\nconst SICBO_MOBILE_WIDTH = 1024;  // 모바일로 전환되는 브라우져 폭\r\nconst SICBO_MOBILE_HEIGHT = 680;  // 모바일로 전환되는 브라우져 높이\r\n\r\nconst BET_TIMER = 50; // 배팅 시간\r\nconst CAST_CHIP_SIZE = 80;  // PC화면 칩 애니메이션 크기\r\nconst CAST_CHIP_MOBILE_SIZE = 40;  // 모바일 화면 칩 애니메이션 크기\r\nconst CHIP_PRICE = [100, 1000, 5000, 10000, 50000, 100000, 500000, 1000000, 5000000]; // 칩 배팅 금액\r\nconst CARD_NUMS = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10];  // 화투 번호 (화투 이미지 인덱스 순서)\r\nconst CARD_GUANG = [ // 광: true (화투 이미지 인덱스 순서)\r\n  true, false, false, false, true, false, false, false, false, false, \r\n  false, false, false, false, true, false, false, false, true, false\r\n];\r\nconst APPROVAL_WAITING_TIME = 60000;\r\n\r\n// 애니메이션 타이머\r\nconst DELAY_CAST_CARD1 = 1000; // 첫 번째 화투를 던지고 두 번째 화투를 던질때까지의 지연시간\r\nconst DELAY_CAST_CARD2 = 1000; // 두 번째 화투를 던지고 식보통을 덮을 때까지의 지연시간\r\nconst DELAY_CLOSE_TONG = 2000; // 식보통을 덮기 시작하면서 부터 Placing bet 애니메이션이 시작될 때까지 지연시간\r\nconst DELAY_STARTING_ANI = 4000; // placing bet 애니메이션이 종료될 때까지 지연시간\r\nconst DELAY_RESET_GAME = 2000; // 배팅시간이 종료된 뒤 강제 청산 되기까지 지연시간\r\n\r\n/**\r\n * \r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\r\nconst getPositions = (card1, card2) => {\r\n  const positions = []\r\n\r\n  let isPair = false;\r\n  isPair = CARD_NUMS[card1] === CARD_NUMS[card2]\r\n  if (isPair) {\r\n    positions.push(15);\r\n    positions.push(4 + CARD_NUMS[card1]);\r\n  } else {\r\n    if ((CARD_NUMS[card1] + CARD_NUMS[card2]) % 10 < 5) {\r\n      positions.push(0);\r\n    } else {\r\n      positions.push(2);\r\n    }\r\n\r\n    if ((CARD_NUMS[card1] + CARD_NUMS[card2]) % 2 === 1) {\r\n      positions.push(3);\r\n    } else {\r\n      positions.push(4);\r\n    }\r\n\r\n    if (CARD_GUANG[card1] || CARD_GUANG[card2]) {\r\n      positions.push(1);\r\n    }\r\n  }\r\n\r\n  positions.push(15 + CARD_NUMS[card1]);\r\n  if (CARD_NUMS[card1] !== CARD_NUMS[card2]) {\r\n    positions.push(15 + CARD_NUMS[card2]);\r\n  }\r\n\r\n  return positions;\r\n}\r\n\r\n/**\r\n * 입력된 카드가 땡인지 검사\r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\r\nconst isPair = (card1, card2) => CARD_NUMS[card1] === CARD_NUMS[card2];\r\n\r\n/**\r\n * 입력된 카드의 끝수가 5보다 작은지 검사\r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\r\nconst isSmall = (card1, card2) => ((CARD_NUMS[card1] + CARD_NUMS[card2]) % 10 < 5);\r\n\r\n/**\r\n * 입력된 카드의 끝수가 홀 수 인지 검사\r\n * @param {*} card1 \r\n * @param {*} card2 \r\n */\r\nconst isOdd = (card1, card2) => ((CARD_NUMS[card1] + CARD_NUMS[card2]) % 2 === 1);\r\n\r\n/**\r\n * 입력된 카드가 광인지 검사\r\n * @param {*} card \r\n */\r\nconst isGuang = (card) => CARD_GUANG[card];\r\n\r\nexport {\r\n  DEFAULT_WIDTH,\r\n  DEFAULT_HEIGHT,\r\n  ASPECT_RATIO,\r\n  CHIP_TBL_HEIGHT,\r\n  CHIP_TBL_MOBILE_HEIGHT,\r\n  SICBO_MOBILE_WIDTH,\r\n  SICBO_MOBILE_HEIGHT,\r\n  BET_TIMER,\r\n  CAST_CHIP_SIZE,\r\n  CAST_CHIP_MOBILE_SIZE,\r\n  CHIP_PRICE,\r\n  CARD_NUMS,\r\n  CARD_GUANG,\r\n  APPROVAL_WAITING_TIME,\r\n\r\n  DELAY_CAST_CARD1,\r\n  DELAY_CAST_CARD2,\r\n  DELAY_CLOSE_TONG,\r\n  DELAY_STARTING_ANI,\r\n  DELAY_RESET_GAME,\r\n\r\n  getPositions,\r\n  isPair,\r\n  isSmall,\r\n  isOdd,\r\n  isGuang\r\n}"]}]}